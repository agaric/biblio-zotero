<?php

/**
* Implementation of hook_node_info().
*/
function biblio_zotero_node_info() {
   $items = array(
      'zotero_feed' => array(
         'name' => t('Zotero feed'),
         'module' => 'node',
         'description' => t('Subscribe to a zotero user or group. Creates nodes of the content type "biblio" from feed content'),
         'has_title' => '1',
         'title_label' => t('Title'),
         'has_body' => '1',
         'body_label' => t('Body'),
         'min_word_count' => '0',
         'help' => '',
         ),
      );
   return $items;
}

/**
* Implementation of hook_ctools_plugin_api().
*/
function biblio_zotero_ctools_plugin_api() {
   list($module, $api) = func_get_args();
   if ($module == "feeds" && $api == "feeds_importer_default") {
      // The current API version is 1.
      return array("version" => 1);
   }
}

/**
* Implementation of hook_views_api().
* This is required for your module to have its include files loaded; for example, when implementing hook_views_default_views().
*/
function biblio_zotero_views_api() {
   list($module, $api) = func_get_args();
   if ($module == "views" && $api == "views_default") {
      return array("version" => 3.0);
   }
}

/**
* Implementation of hook_feeds_plugins().
*/
function biblio_zotero_feeds_plugins() {
   $info = array();
   $info['FeedsZoteroParser'] = array(
      'name' => 'Zotero Parser',
      'description' => 'Parses json data from a zotero api call.',
      'handler' => array(
         'parent' => 'FeedsSyndicationParser', // A plugin needs to derive either directly or indirectly from FeedsFetcher, FeedsParser or FeedsProcessor.
         'class' => 'FeedsZoteroParser',
         'file' => 'FeedsZoteroParser.inc',
         'path' => drupal_get_path('module', 'biblio_zotero'),
         ),
      );
   $info['FeedsZoteroProcessor'] = array(
      'name' => 'Zotero Processor',
      'description' => 'Routes known mapped fields to known Biblio fields and leaves the rest to be configured in the UI in the event someone extends the biblio node in cck.',
      'handler' => array(
         'parent' => 'FeedsNodeProcessor', // A plugin needs to derive either directly or indirectly from FeedsFetcher, FeedsParser or FeedsProcessor.
         'class' => 'FeedsZoteroProcessor',
         'file' => 'FeedsZoteroProcessor.inc',
         'path' => drupal_get_path('module', 'biblio_zotero'),
         ),
      );
   $info['FeedsZoteroFetcher'] = array(
      'name' => 'Zotero Http Fetcher',
      'description' => 'Fetches Zotero items from a user or group',
      'handler' => array(
         'parent' => 'FeedsHTTPFetcher', // A plugin needs to derive either directly or indirectly from FeedsFetcher, FeedsParser or FeedsProcessor.
         'class' => 'FeedsZoteroFetcher',
         'file' => 'FeedsZoteroFetcher.inc',
         'path' => drupal_get_path('module', 'biblio_zotero'),
         ),
      );
   return $info; 
}

/**
* Default definition of 'biblio_zotero_importer'
*/ 
function biblio_zotero_feeds_importer_default() {
   $export = array();
   $feeds_importer = new stdClass;
   $feeds_importer->disabled = FALSE; /* Edit this to true to make a default feeds_importer disabled initially */
   $feeds_importer->api_version = 1;
   $feeds_importer->id = 'zotero_feed';
   $feeds_importer->config = array(
      'name' => 'Zotero Feed',
      'description' => 'Import Zotero items.',
      'fetcher' => array(
         'plugin_key' => 'FeedsZoteroFetcher',
         'config' => array(
            'auto_detect_feeds' => FALSE,
            'use_pubsubhubbub' => FALSE,
            'designated_hub' => '',
            ),
         ),
      'parser' => array(
         'plugin_key' => 'FeedsZoteroParser',
         'config' => array(),
         ),
      'processor' => array(
         'plugin_key' => 'FeedsZoteroProcessor',
         'config' => array(
            'content_type' => 'biblio',
            'update_existing' => 0,
            'expire' => '-1',
            'mappings' => array(
               array(
                  'source' => 'title',
                  'target' => 'title',
                  'unique' => FALSE,
                  ),
               array(
                  'source' => 'description',
                  'target' => 'body',
                  'unique' => FALSE,
                  ),
               array(
                  'source' => 'timestamp',
                  'target' => 'created',
                  'unique' => FALSE,
                  ),
               /* array(
                  'source' => 'url',
                  'target' => 'url',
                  'unique' => TRUE,
                  ), */
               array(
                  'source' => 'guid',
                  'target' => 'guid',
                  'unique' => TRUE,
                  ),
               array(
                  'source' => 'description',
                  'target' => 'biblio_abst_e',
                  'unique' => FALSE,
                  ),
               array(
                  'source' => 'accessDate',
                  'target' => 'biblio_access_date',
                  'unique' => FALSE,
                  ),
               array(
                  'source' => 'callNumber',
                  'target' => 'biblio_call_number',
                  'unique' => FALSE,
                  ),
               array(
                  'source' => 'DOI',
                  'target' => 'biblio_doi',
                  'unique' => FALSE,
                  ),
               array(
                  'source' => 'edition',
                  'target' => 'biblio_edition',
                  'unique' => FALSE,
                  ),
               array(
                  'source' => 'ISBN',
                  'target' => 'biblio_isbn',
                  'unique' => FALSE,
                  ),
               array(
                  'source' => 'ISSN',
                  'target' => 'biblio_issn',
                  'unique' => FALSE,
                  ),
               array(
                  'source' => 'issue',
                  'target' => 'biblio_issue',
                  'unique' => FALSE,
                  ),
               array(
                  'source' => 'label',
                  'target' => 'biblio_label',
                  'unique' => FALSE,
                  ),
               array(
                  'source' => 'language',
                  'target' => 'biblio_lang',
                  'unique' => FALSE,
                  ),
               array(
                  'source' => 'numberOfVolumes',
                  'target' => 'biblio_number_of_volumes',
                  'unique' => FALSE,
                  ),
               array(
                  'source' => 'numPages',
                  'target' => 'biblio_pages',
                  'unique' => FALSE,
                  ),
               array(
                  'source' => 'shortTitle',
                  'target' => 'biblio_short_title',
                  'unique' => FALSE,
                  ),
               
               /* array(
                  'source' => 'documentNumber',
                  'target' => 'biblio_zotero_doc_id',
                  'unique' => FALSE,
                  ), */
               array(
                  'source' => 'note',
                  'target' => 'biblio_notes',
                  'unique' => FALSE,
                  ),
               array(
                  'source' => 'pages',
                  'target' => 'biblio_pages',
                  'unique' => FALSE,
                  ),
               array(
                  'source' => 'place',
                  'target' => 'biblio_place_published',
                  'unique' => FALSE,
                  ),
               array(
                  'source' => 'publisher',
                  'target' => 'biblio_publisher',
                  'unique' => FALSE,
                  ),
               array(
                  'source' => 'series',
                  'target' => 'biblio_secondary_title',
                  'unique' => FALSE,
                  ),
               array(
                  'source' => 'seriesNumber',
                  'target' => 'biblio_number',
                  'unique' => FALSE,
                  ),
               /* array(
                  'source' => 'type',
                  'target' => 'biblio_type',
                  'unique' => FALSE,
                  ), // needs callback $this->typeToBiblio() */
                  array(
                     'source' => 'url',
                     'target' => 'biblio_url',
                     'unique' => FALSE,
                     ),
                  array(
                     'source' => 'volume',
                     'target' => 'biblio_volume',
                     'unique' => FALSE,
                     ),
                  array(
                     'source' => 'date',
                     'target' => 'biblio_year',
                     'unique' => FALSE,
                     ),
                  ),
            'input_format' => 0,
            'author' => 0,
            'sync_tags' => FALSE,
            'tags_vocab_id' => NULL,
            ),
         ),
      'content_type' => 'zotero_feed',
      'update' => 0,
      'import_period' => '1800',
      'expire_period' => 3600,
      'import_on_create' => 1,
      );
   
   $export['biblio_zotero_importer'] = $feeds_importer; 
   return $export;
}

/**
* get all zotero item types and cache the results
**/
/* function get_zotero_item_types($reset = FALSE) {
   static $types;
   if (!isset($types) || $reset) {
      if (!$reset && ($cache = cache_get('biblio_zotero:all_item_types')) && !empty($cache->data)) {
         $types = unserialize($cache->data);
      }
      else {
         //TODO - un-hardcode this
         $zotero = new phpZotero('2a67sDv3yumqMtswCREyOJV1'); 
         $data = json_decode($zotero->getAllItemTypes());
         $types = array();
         foreach ( $data as $type ) {
            $types[$type->itemType] = $type->localized;
         }
         cache_set('biblio_zotero:all_item_types', serialize($types), $table = 'cache', CACHE_TEMPORARY);
      }
   }
   return $types;
} */

/**
* get all zotero item fields
**/
/* function get_zotero_item_fields($reset = FALSE) {
   static $fields;
   if (!isset($fields) || $reset) {
      if (!$reset && ($cache = cache_get('biblio_zotero:all_item_fields')) && !empty($cache->data)) {
         $fields = unserialize($cache->data);
      }
      else {
         //TODO - un-hardcode this
         $zotero = new phpZotero('2a67sDv3yumqMtswCREyOJV1'); 
         $data = json_decode($zotero->getAllItemFields());
         $fields = array();
         foreach ( $data as $type ) {
            $fields[$type->field] = $type->localized;
         }
         cache_set('biblio_zotero:all_item_fields', serialize($fields), $table = 'cache', CACHE_TEMPORARY);
      }
   }
   return $fields;
}
 */
function biblio_zotero_node_presave($node) {
   dpm($node, "node@hook_node_presave");
   // dpm(debug_backtrace(), "debug backtrace");
}

/**
* A callback specified in FeedsZoteroProcessor getMappingTargets()
**/
/* function biblio_zotero_set_biblio_field($source, $entity, $target, $value) {
   dpm($source, "source");
   dpm($entity, "entity");
   dpm($target, "target");
   dpm($value, "value");
  $entity->{$target}  = $value;
}
 */
/**
* http://drupalcontrib.org/api/drupal/contributions%21feeds%21feeds.api.php/function/hook_feeds_processor_targets_alter/7
**/
function biblio_feeds_processor_targets_alter(&$targets, $entity_type, $bundle_name) {
   dpm($targets, "targets");
   
}

/**
* http://drupalcontrib.org/api/drupal/contributions%21feeds%21feeds.api.php/function/hook_feeds_parser_sources_alter/7
**/
function biblio_zotero_feeds_parser_sources_alter(&$sources, $content_type) {
}

